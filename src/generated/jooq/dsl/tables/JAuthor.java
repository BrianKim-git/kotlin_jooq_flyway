/*
 * This file is generated by jOOQ.
 */
package jooq.dsl.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import jooq.dsl.JPublic;
import jooq.dsl.Keys;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JAuthor extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.author</code>
     */
    public static final JAuthor AUTHOR = new JAuthor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.author.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.author.first_name</code>.
     */
    public final TableField<Record, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.author.last_name</code>.
     */
    public final TableField<Record, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.author.date_of_birth</code>.
     */
    public final TableField<Record, LocalDateTime> DATE_OF_BIRTH = createField(DSL.name("date_of_birth"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.author.year_of_birth</code>.
     */
    public final TableField<Record, Integer> YEAR_OF_BIRTH = createField(DSL.name("year_of_birth"), SQLDataType.INTEGER, this, "");

    private JAuthor(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JAuthor(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.author</code> table reference
     */
    public JAuthor(String alias) {
        this(DSL.name(alias), AUTHOR);
    }

    /**
     * Create an aliased <code>public.author</code> table reference
     */
    public JAuthor(Name alias) {
        this(alias, AUTHOR);
    }

    /**
     * Create a <code>public.author</code> table reference
     */
    public JAuthor() {
        this(DSL.name("author"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<Record, Integer> getIdentity() {
        return (Identity<Record, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.AUTHOR_PKEY;
    }

    @Override
    public JAuthor as(String alias) {
        return new JAuthor(DSL.name(alias), this);
    }

    @Override
    public JAuthor as(Name alias) {
        return new JAuthor(alias, this);
    }

    @Override
    public JAuthor as(Table<?> alias) {
        return new JAuthor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JAuthor rename(String name) {
        return new JAuthor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAuthor rename(Name name) {
        return new JAuthor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAuthor rename(Table<?> name) {
        return new JAuthor(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAuthor where(Condition condition) {
        return new JAuthor(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAuthor where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAuthor where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAuthor where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAuthor where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAuthor where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAuthor where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAuthor where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAuthor whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAuthor whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
